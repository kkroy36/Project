length(probs)
length(yhat)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:10],type='l',col="green")#
lines(yhat[1:10],col="red")
cor(yhat,dm$probs)
colnames(GSwon)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:10],type='l',col="green")#
lines(yhat[1:10],col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:10],type='l',col="green")#
lines(yhat[1:10],col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:30],type='l',col="green")#
lines(yhat[1:30],col="red")
cor(yhat,dm$probs)
hist(fswp)
hist(sswp)
cor(fswp,sswp)
cov(fswp,sswp)
length(fswp)
length(sswp)
fswp
sswp
cor(fswp,sswp)
cor(na.omit(fswp),na.omit(sswp))
fswp - mean(fswp)
GSWon[172,]
GSwon[172,]
fswp[172]
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#normalize#
dm$fswp <- (dm$fswp - mean(dm$fswp))/var(dm$fswp)#
dm$sswp <- (dm$sswp - mean(dm$sswp))/var(dm$sswp)#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:30],type='l',col="green")#
lines(yhat[1:30],col="red")
hist(dm$fswp)
hist(dm$sswp)
fswp
dm$fswp
cor(dm$fswp,dm$sswp)
cor(na.omit(fswp),na.omit(sswp))
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#normalize#
dm$fswp <- (dm$fswp - mean(dm$fswp))/var(dm$fswp)#
dm$sswp <- (dm$sswp - mean(dm$sswp))/var(dm$sswp)#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:30],type='l',col="green")#
lines(yhat[1:30],col="red")#
hist(yhat)
hist(y)
hist(dm$probs)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:30],type='l',col="green")#
lines(yhat[1:30],col="red")#
hist(yhat)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:50],type='l',col="green")#
lines(yhat[1:50],col="red")
colnames(GSwon)
hist(w_ace)
hist(GSwon$w_ace)
hist(GSwon$w_df)
hist(GSwon$w_svpt)
hist(GSwon$w_1stIn)
hist(GSwon$w_1stWon)
hist(GSwon$w_2ndWon)
hist(GSwon$w_SvGms)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,probs))
y <- 1
x <- function(z){
return(y+1)
}
x(1)
x(2)
x(3)
rm(x)
rm(y)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(colMeans(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(colMeans(X))#
	return (aver)#
}#
#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
print(dseeds)#
print(fp)#
print(sp)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
print(dseeds)#
print(fp)#
print(sp)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first serve win percentage and second per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- data.frame(fp,sp,probs,dseeds)
dm
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first serve win percentage and second per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- data.frame(fp,sp,probs,dseeds)#
colnames(dm) <- c("fwp","swp","wprob","seeding")
dm
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first serve win percentage and second per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,probs))#
colnames(dm) <- c("fwp","swp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
plot(y,type='l',col="green")#
lines(yhat,col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first serve win percentage and second per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,probs))#
colnames(dm) <- c("fwp","swp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs,type='l',col="green")#
lines(yhat,col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first serve win percentage and second per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,probs))#
colnames(dm) <- c("fwp","swp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$wprob,type='l',col="green")#
lines(yhat,col="red")
colnames(GSwon)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp""wprob")#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$wprob,type='l',col="green")#
lines(yhat,col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$wprob,type='l',col="green")#
lines(yhat,col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
plot(dm$wprob,type='l',col="green")#
lines(yhat,col="red")#
lines(yhat2,col="black")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
plot(dseeds,dm$wprob,type='l',col="green")#
lines(yhat,col="red")#
lines(yhat2,col="black")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
plot(dseeds,dm$wprob,type='p',col="green")#
lines(yhat,col="red")#
lines(yhat2,col="black")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
lines(yhat,col="red")#
lines(yhat2,col="black")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
par(mfrow=c(1,3))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
par(mfrow=c(1,3))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
hist(fp)#
hist(sp)#
hist(bp)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
par(mfrow=c(1,3))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
dev.new()#
par(mfrow=c(1,4))#
hist(fp)#
hist(sp)#
hist(bp)#
hist(prob)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
par(mfrow=c(1,3))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
dev.new()#
par(mfrow=c(1,4))#
hist(fp)#
hist(sp)#
hist(bp)#
hist(probs)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
par(mfrow=c(1,3))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
dev.new()#
par(mfrow=c(1,4))#
hist(fp)#
hist(sp)#
hist(bp)#
hist(sp/fp)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,sp/bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","ratio","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,5)])#
yhat3 <- linReg(dm[,c(1,2,3,5)])#
par(mfrow=c(1,4))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
plot(dseeds,yhat3,type='p',col="black",pch=19)#
dev.new()#
par(mfrow=c(1,4))#
hist(fp)#
hist(sp)#
hist(bp)#
hist(probs)
----------------------------------------------------------- PROGRAM TO PREDICT PROBABILITY OF WINNING ------------------------------------------------------------------#
#include necessary libraries#
#install.packages("hash") --> uncomment if you don't have this package#
library(hash)#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#read data#
data <- read.csv("tennis.csv")#
#get Grandslam data only#
GSwon <- na.omit(subset(data,tourney_level = "M",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "M",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#construct probability distribution of winning percentage per seed#
wProb <- data.frame(table(GSwon[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#regress probability of winning using different predictors#
#first serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
#second serve win percentage#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,sp/bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","ratio","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,5)])#
yhat3 <- linReg(dm[,c(1,2,3,5)])#
par(mfrow=c(1,4))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
plot(dseeds,yhat3,type='p',col="black",pch=19)#
----------------------------------------------------------- RIGHT NOW THE PREDICTIONS SUCK ------------------------------------------------------------------
#----------------------------------------------------------- PROGRAM TO PREDICT PROBABILITY OF WINNING ------------------------------------------------------------------#
#include necessary libraries#
#install.packages("hash") --> uncomment if you don't have this package#
library(hash)#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#read data#
data <- read.csv("tennis.csv")#
#get Grandslam data only#
GSwon <- na.omit(subset(data,tourney_level = "M",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "M",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#construct probability distribution of winning percentage per seed#
wProb <- data.frame(table(GSwon[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#regress probability of winning using different predictors#
#first serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
#second serve win percentage#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,sp/bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","ratio","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,5)])#
yhat3 <- linReg(dm[,c(1,2,3,5)])#
par(mfrow=c(1,4))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
plot(dseeds,yhat3,type='p',col="black",pch=19)#
#----------------------------------------------------------- RIGHT NOW THE PREDICTIONS SUCK ------------------------------------------------------------------
data[1,]
#----------------------------------------------------------- PROGRAM TO PREDICT PROBABILITY OF WINNING ------------------------------------------------------------------#
#include necessary libraries#
#install.packages("hash") --> uncomment if you don't have this package#
library(hash)#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#read data#
data <- read.csv("tennis.csv")#
#get Grandslam data only#
GSwon <- na.omit(subset(data,tourney_level = "A",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "A",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#construct probability distribution of winning percentage per seed#
wProb <- data.frame(table(GSwon[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#regress probability of winning using different predictors#
#first serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
#second serve win percentage#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,sp/bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","ratio","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,5)])#
yhat3 <- linReg(dm[,c(1,2,3,5)])#
par(mfrow=c(1,4))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
plot(dseeds,yhat3,type='p',col="black",pch=19)#
#----------------------------------------------------------- RIGHT NOW THE PREDICTIONS SUCK ------------------------------------------------------------------
data[1:10,]
#----------------------------------------------------------- PROGRAM TO PREDICT PROBABILITY OF WINNING ------------------------------------------------------------------#
#include necessary libraries#
#install.packages("hash") --> uncomment if you don't have this package#
library(hash)#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#read data#
data <- read.csv("tennis.csv")#
#get Grandslam data only#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_SvGms,w_bpSaved/w_bpFaced)))#
colnames(GSwon)[length(GSwon)] <- "w_bpSaved"#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#construct probability distribution of winning percentage per seed#
wProb <- data.frame(table(GSwon[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#regress probability of winning using different predictors#
#first serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
#second serve win percentage#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,sp/bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","ratio","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,5)])#
yhat3 <- linReg(dm[,c(1,2,3,5)])#
par(mfrow=c(1,4))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
plot(dseeds,yhat3,type='p',col="black",pch=19)#
#----------------------------------------------------------- RIGHT NOW THE PREDICTIONS SUCK ------------------------------------------------------------------
table(GSwon[,1])
table(fp)
hist(fp)
x <- hist(fp)
x
help(sapply)
help(apply)
help(colVar)
help(colMeans)
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[,1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
#nB <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	means <- colMeans(x)#
	vars <- colVars(x)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
print(dm)#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[,1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
print(dm)#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[,1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- as.matrix(colMeans(X))#
	vars <- as.matrix(colVars(X))#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[,1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- as.matrix(colMeans(X))#
	vars <- as.matrix(colVars(X))#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- as.matrix(colMeans(X))#
	vars <- as.matrix(colVars(X))#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
data <- read.csv("tennis.csv")#
dm <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
surfaces <- hash(as.numeric(unique(dm$surface)),unique(dm$surface))#
rounds <- hash(as.numeric(unique(dm$round)),unique(dm$round))#
dm[,1] <- as.numeric(dm[,1])#
dm[,2] <- as.numeric(dm[,2])#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
install.packages("colSums")#
library(hash) #include library hash#
data <- read.csv("tennis.csv")#
dm <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
surfaces <- hash(as.numeric(unique(dm$surface)),unique(dm$surface))#
rounds <- hash(as.numeric(unique(dm$round)),unique(dm$round))#
dm[,1] <- as.numeric(dm[,1])#
dm[,2] <- as.numeric(dm[,2])#
nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
install.packages("colSums")#
library(hash) #include library hash#
data <- read.csv("tennis.csv")#
dm <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
surfaces <- hash(as.numeric(unique(dm$surface)),unique(dm$surface))#
rounds <- hash(as.numeric(unique(dm$round)),unique(dm$round))#
dm[,1] <- as.numeric(dm[,1])#
dm[,2] <- as.numeric(dm[,2])#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
install.packages("colSums")#
library(hash) #include library hash#
data <- read.csv("tennis.csv")#
dm <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
surfaces <- hash(as.numeric(unique(dm$surface)),unique(dm$surface))#
rounds <- hash(as.numeric(unique(dm$round)),unique(dm$round))#
dm[,1] <- as.numeric(dm[,1])#
dm[,2] <- as.numeric(dm[,2])#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- apply(X,1,mean)#
	vars <- apply(X,2,var)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
install.packages("colSums")#
library(hash) #include library hash#
data <- read.csv("tennis.csv")#
dm <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
surfaces <- hash(as.numeric(unique(dm$surface)),unique(dm$surface))#
rounds <- hash(as.numeric(unique(dm$round)),unique(dm$round))#
dm[,1] <- as.numeric(dm[,1])#
dm[,2] <- as.numeric(dm[,2])#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- apply(X,2,mean)#
	vars <- apply(X,2,var)#
	print(means)#
	print(vars)#
#}
help(dnorm)
rnorm(1)
dnorm(0.4159115,0,1)
q()
d <- read.csv("tennis.csv")
stats <- d[,32:49]
stats <- na.omit(stats)
q9
q()
setwd("tennisData")
#clear workspace#
rm(list=ls())#
#
#read all data from 2007 to 2015#
d2007 <- na.omit(read.csv("atp_matches_2007.csv"))#
d2008 <- na.omit(read.csv("atp_matches_2008.csv"))#
d2009 <- na.omit(read.csv("atp_matches_2009.csv"))#
d2010 <- na.omit(read.csv("atp_matches_2010.csv"))#
d2011 <- na.omit(read.csv("atp_matches_2011.csv"))#
d2012 <- na.omit(read.csv("atp_matches_2012.csv"))#
d2013 <- na.omit(read.csv("atp_matches_2013.csv"))#
d2014 <- na.omit(read.csv("atp_matches_2014.csv"))#
d2015 <- na.omit(read.csv("atp_matches_2015.csv"))#
#
#Get interesting data with preferred filtering#
djok2007 <- d2007[d2007[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2007 <- djok2007[,c(2,5:26)]#
djok2008 <- d2008[d2008[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2008 <- djok2008[,c(2,5:26)]#
djok2009 <- d2009[d2009[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2009 <- djok2009[,c(2,5:26)]#
djok2010 <- d2010[d2010[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2010 <- djok2010[,c(2,5:26)]#
djok2011 <- d2011[d2011[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2011 <- djok2011[,c(2,5:26)]#
djok2012 <- d2012[d2012[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2012 <- djok2012[,c(2,5:26)]#
djok2013 <- d2013[d2013[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2013 <- djok2013[,c(2,5:26)]#
djok2014 <- d2014[d2014[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2014 <- djok2014[,c(2,5:26)]#
djok2015 <- d2015[d2015[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2015 <- djok2015[,c(2,5:26)]
djok <- rbind(djok2007,djok2008,djok2009,djok2010,djok2011,djok2012,djok2013,djok2014,djok2015)
djok
help(write.csv)
getpwd()
getwd()
setwd("Kaushik")
setwd("../")
write.csv(djok,"data.csv",row.names=TRUE,col.names=TRUE)
q()
setwd("tennisData")
source("analysis.R")
source("analysis.R")
names(data)
del(data[,1])
data[,1] = FALSE
names(data)
data$X = FALSE
names(data)
data[,1] <- NULL
names(data)
source("analysis.R")
names(data)
dm <- as.matrix(data)
nrow(dm)
unique(data$loser_name)
cov(data[5:23])
cov(data[5:22])
cor(data[5:22])
attach(data)
plot(w_ace,w_1stWon,pch=19)
plot(w_ace,w_1stWon,pch=19,col("green,red"))
plot(w_ace,w_1stWon,pch=19,col("green","red"))
plot(w_ace,w_1stWon,pch=19,col=c("green","red"))
x <- as.matrix(w_ace)
y <- as.matrix(w_1stWon)
m <- solve(t(x)%*%x)%*%(t(x)%*%y)
lines(x%*%m)
dev.new()
summary(lm(w_ace~w_1stWon,data="data"))
summary(lm(w_ace~w_1stWon,data))
m
lines(x%*%(-1.79633),col="blue")
l <- lm(w_ace~w_1stWon,data)
abline(l,col="blue",lwd=4)
abline(l,col="blue",lwd="4")
abline(l,col="blue",lwd="4")
plot(l)
l
plot((x%*%(0.2112) - 1.7963))
plot((x%*%(0.2112) - 1.7963),type='l')
lines(x%*%m)
source("analysis.R")
attach(data)
lm(w_ace~.,data)
lm(w_ace~.,data[1:22])
summary(lm(w_ace~.,data[1:22]))
source("analysis.R")
attach(data)
summary(lm(w_ace~.,data[1:22]))
summary(lm(w_df~.,data[1:22]))
summary(lm(w_svpt~.,data[1:22]))
pairs(data[1:22])
pairs(data[1:10])
pairs(data[1,])
help(pairs)
pairs(data[1:4])
names(data)[1:4]
plot(surface,best_of)
pairs(data[1:4])
names(data)
pairs(data[5:10])
pairs(data[5:22])
pairs(data[10:15])
pairs(data[10:15],col=names(data[10:15]))
pairs(data[10:15])
par(mfrow=c(1,3))
hist(l_ace)
hist(w_bpFaced)
hist(l_ace*w_bpFaced)
dev.new()
pairs(data[10:15])
par(mfrow=c(6,3))
hist(w_ace)
par(mfrow=c(9,2))
hist(w_ace)
par(mfrow=c(2,2))
hist(w_ace)
hist(l_ace)
hist(w_svpt)
hist(l_svpt)
dev.new()
pairs(data[,c(5,14,7,16)])
colMeans(data)
colMeans(data[5:22])
data[1,]
data5 <- data[data[,1]==5,c(5:22)]
data3 <- data[data[,1]==3,c(5:22)]
colMeans(data5)
colMeans(data3)
24*5
120*4
summary(data5)
summary(data3)
rm(data5)
rm(data3)
data[1,]
data5G <- data[data[,1] == 5,data[,2]=="Grass",c(5:22)]
data5G <- data[data[,1] == 5,c(5:22)]
levels(surface)
data5G <- data5G[data5G[,2]=="Grass",c(1:18)]
names(data5G)
summary(data5G)
summary(data5G)
data5G <- data[data[,2]=="Grass",c(5:22)]
summary(data5G)
data5G <- data[data[,2]=="Grass",]
names(data5G)
data5G <- data5G[data5G[,1]==5,c(5:22)]
summary(data5G)
length(data5G[,1])
data5G[c(1,3,10,12)]
data5G[,c(1,3,10,12)]
data[7,23]
names(data)
data[7,4]
data[7,3]
data[7,]
levels(data[,4])
library(sqldf)
names(data)
Grass5 <- sqldf(select * from data where surface="Grass" and best_of=5)
Grass5 <- sqldf("select * from data where surface="Grass" and best_of=5")
Grass5 <- sqldf("select * from data where surface='Grass' and best_of=5")
Grass5[1:5,]
q()
