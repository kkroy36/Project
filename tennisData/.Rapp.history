dm
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
dm <- data.frame(GSwon$winner_seed,fswp,sswp)
dm
dm[1:10,]
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
wProb <- hash(wProb)#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
dm <- data.frame(GSwon$winner_seed,fswp,sswp)
wProb
a <- hash(1:2,2:4)
a <- hash(1,2,3,4)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
dm <- data.frame(GSwon$winner_seed,fswp,sswp)
wProbHash
wProbHash[1]
wProbHash["1"]
wProbHash[["1"]]
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
dm <- data.frame(fswp,sswp,wProbHash[[toString(GSwon$winner_seed)]])
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities for later#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
prob <- lapply(GSwon$winner_seed,function(GSwon$Winner_seed) wProbHash[[toString(GSwon$winner_seed)]])#
#dm <- data.frame(fswp,sswp,wProbHash[[toString(GSwon$winner_seed)]])
help(lapply)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities for later#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
probs <- lapply(seeds,get_hash)#
#dm <- data.frame(fswp,sswp,)
probs
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities for later#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
probs <- as.numeric(lapply(seeds,get_hash))#
#dm <- data.frame(fswp,sswp,)
probs
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.matrix(fswp,sswp,probs)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- as.matrix(data.frame(fswp,sswp,probs))
dm
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- nrows(dm) - 1#
	x <- as.matrix(dm[1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	yhat <- x%*%what#
	return (yhat)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs))#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- nrows(dm) - 1#
	x <- as.matrix(dm[1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	yhat <- x%*%what#
	return (yhat)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- nrow(dm) - 1#
	x <- as.matrix(dm[1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	yhat <- x%*%what#
	return (yhat)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
dm[1,]
dm[1,1:2]
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	yhat <- x%*%what#
	return (yhat)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
dim(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[1:npred])#
	y <- as.matrix(dm[,npred+1])#
	print(dim(x))#
	print(dim(y))#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	yhat <- x%*%what#
	return (yhat)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	print(dim(x))#
	print(dim(y))#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	yhat <- x%*%what#
	return (yhat)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	yhat <- x%*%what#
	return (yhat)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
plot(probs,col="green",type='l')
plot(probs[1:10],col="green",type='l')
lines(yhat[1:10],col="red")
par(mfrow=c(1,2))
plot(probs[1:10],col="green",type='l')
plot(yhat[1:10],col="red",type='l')
yhat
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	yhat <- x%*%what#
	print(yhat)#
	return (yhat)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	print(x)#
	print(y)#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	yhat <- x%*%what#
	print(yhat)#
	return (yhat)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	print(x)#
	print(y)#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	print(what)#
	return (0)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	print(solve(t(x)%*%x))#
	print(t(x)%*%y)#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	print(what)#
	return (0)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	print((t(x)%*%x))#
	print(t(x)%*%y)#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	print(what)#
	return (0)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	print(paste(x,"\n",y))#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	print(what)#
	return (0)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	print(x)#
	print(y)#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	print(what)#
	return (0)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#get regressed values#
yhat <- linReg(dm)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#
#get regressed values#
#simple linear regression function#
dm <- as.matrix(dm)#
npred <- ncol(dm) - 1#
x <- as.matrix(dm[,1:npred])#
y <- as.matrix(dm[,npred+1])#
print(x)#
print(y)#
what <- solve(t(x)%*%x)%*%(t(x)%*%y)
what
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#
#get regressed values#
#simple linear regression function#
dm <- as.matrix(dm)#
npred <- ncol(dm) - 1#
x <- as.matrix(dm[,1:npred])#
y <- as.matrix(dm[,npred+1])#
z <- base::'%*%' (t(x),x)#
print(z)#
what <- solve(t(x)%*%x)%*%(t(x)%*%y)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#
#get regressed values#
#simple linear regression function#
dm <- as.matrix(dm)#
npred <- ncol(dm) - 1#
x <- as.matrix(dm[,1:npred])#
y <- as.matrix(dm[,npred+1])#
what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
X <- matrix(c(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1), nrow=4)#
y <- matrix(c(1, 2, 3, 4), nrow=4)#
Xt <- t(X)#
Xy <- Xt%*%y#
print(Xy)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- data.frame(fswp,sswp,probs)#
#
#get regressed values#
#simple linear regression function#
dm <- as.matrix(dm)#
npred <- ncol(dm) - 1#
x <- as.matrix(dm[,1:npred])#
y <- as.matrix(dm[,npred+1])#
print(x)#
print(y)#
what <- solve(t(x)%*%x)%*%(t(x)%*%y)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
#simple linear regression function#
dm <- as.matrix(dm)#
npred <- ncol(dm) - 1#
x <- as.matrix(dm[,1:npred])#
y <- as.matrix(dm[,npred+1])#
print(x)#
print(y)#
what <- solve(t(x)%*%x)%*%(t(x)%*%y)
what
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
yhat <- linReg(dm)#
plot(probs,type='l',col="green")#
lines(yhat,col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
yhat <- linReg(dm)#
plot(probs[1:10],type='l',col="green")#
lines(yhat[1:10],col="red")
cor(yhat,probs)
length(probs)
length(yhat)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:10],type='l',col="green")#
lines(yhat[1:10],col="red")
cor(yhat,dm$probs)
colnames(GSwon)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:10],type='l',col="green")#
lines(yhat[1:10],col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:10],type='l',col="green")#
lines(yhat[1:10],col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:30],type='l',col="green")#
lines(yhat[1:30],col="red")
cor(yhat,dm$probs)
hist(fswp)
hist(sswp)
cor(fswp,sswp)
cov(fswp,sswp)
length(fswp)
length(sswp)
fswp
sswp
cor(fswp,sswp)
cor(na.omit(fswp),na.omit(sswp))
fswp - mean(fswp)
GSWon[172,]
GSwon[172,]
fswp[172]
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#normalize#
dm$fswp <- (dm$fswp - mean(dm$fswp))/var(dm$fswp)#
dm$sswp <- (dm$sswp - mean(dm$sswp))/var(dm$sswp)#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:30],type='l',col="green")#
lines(yhat[1:30],col="red")
hist(dm$fswp)
hist(dm$sswp)
fswp
dm$fswp
cor(dm$fswp,dm$sswp)
cor(na.omit(fswp),na.omit(sswp))
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#normalize#
dm$fswp <- (dm$fswp - mean(dm$fswp))/var(dm$fswp)#
dm$sswp <- (dm$sswp - mean(dm$sswp))/var(dm$sswp)#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:30],type='l',col="green")#
lines(yhat[1:30],col="red")#
hist(yhat)
hist(y)
hist(dm$probs)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:30],type='l',col="green")#
lines(yhat[1:30],col="red")#
hist(yhat)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(fswp,sswp,probs))#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs[1:50],type='l',col="green")#
lines(yhat[1:50],col="red")
colnames(GSwon)
hist(w_ace)
hist(GSwon$w_ace)
hist(GSwon$w_df)
hist(GSwon$w_svpt)
hist(GSwon$w_1stIn)
hist(GSwon$w_1stWon)
hist(GSwon$w_2ndWon)
hist(GSwon$w_SvGms)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are 1st serve win percentage and 2nd serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#get probability of winning of seeds from hash table#
probs <- as.numeric(lapply(seeds,get_hash))#
#construct data matrix#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,probs))
y <- 1
x <- function(z){
return(y+1)
}
x(1)
x(2)
x(3)
rm(x)
rm(y)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(colMeans(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(colMeans(X))#
	return (aver)#
}#
#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
print(dseeds)#
print(fp)#
print(sp)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
print(dseeds)#
print(fp)#
print(sp)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first serve win percentage and second per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- data.frame(fp,sp,probs,dseeds)
dm
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first serve win percentage and second per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- data.frame(fp,sp,probs,dseeds)#
colnames(dm) <- c("fwp","swp","wprob","seeding")
dm
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first serve win percentage and second per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,probs))#
colnames(dm) <- c("fwp","swp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
plot(y,type='l',col="green")#
lines(yhat,col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first serve win percentage and second per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,probs))#
colnames(dm) <- c("fwp","swp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$probs,type='l',col="green")#
lines(yhat,col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first serve win percentage and second per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,probs))#
colnames(dm) <- c("fwp","swp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$wprob,type='l',col="green")#
lines(yhat,col="red")
colnames(GSwon)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp""wprob")#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$wprob,type='l',col="green")#
lines(yhat,col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
plot(dm$wprob,type='l',col="green")#
lines(yhat,col="red")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
plot(dm$wprob,type='l',col="green")#
lines(yhat,col="red")#
lines(yhat2,col="black")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
plot(dseeds,dm$wprob,type='l',col="green")#
lines(yhat,col="red")#
lines(yhat2,col="black")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
plot(dseeds,dm$wprob,type='p',col="green")#
lines(yhat,col="red")#
lines(yhat2,col="black")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
lines(yhat,col="red")#
lines(yhat2,col="black")
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
par(mfrow=c(1,3))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
par(mfrow=c(1,3))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
hist(fp)#
hist(sp)#
hist(bp)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
par(mfrow=c(1,3))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
dev.new()#
par(mfrow=c(1,4))#
hist(fp)#
hist(sp)#
hist(bp)#
hist(prob)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
par(mfrow=c(1,3))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
dev.new()#
par(mfrow=c(1,4))#
hist(fp)#
hist(sp)#
hist(bp)#
hist(probs)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,4)])#
par(mfrow=c(1,3))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
dev.new()#
par(mfrow=c(1,4))#
hist(fp)#
hist(sp)#
hist(bp)#
hist(sp/fp)
#include necessary libraries#
library(hash)#
#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#
#read data#
data <- read.csv("tennis.csv")#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#
#convert data to matrix#
GSwondm <- as.matrix(GSwon)#
GSlostdm <- as.matrix(GSlost)#
#
#get only players stats#
GSwonStats <- as.matrix(GSwon[5:ncol(GSwon)])#
GSlostStats <- as.matrix(GSlost[5:ncol(GSlost)])#
#
#construct probability distribution of winning per seed#
wProb <- data.frame(table(GSwondm[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#
#regress probability of winning using predictors#
#predictors considered are avg 1st serve win percentage and 2nd serve win percentage per seed#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,sp/bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","ratio","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,5)])#
yhat3 <- linReg(dm[,c(1,2,3,5)])#
par(mfrow=c(1,4))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
plot(dseeds,yhat3,type='p',col="black",pch=19)#
dev.new()#
par(mfrow=c(1,4))#
hist(fp)#
hist(sp)#
hist(bp)#
hist(probs)
----------------------------------------------------------- PROGRAM TO PREDICT PROBABILITY OF WINNING ------------------------------------------------------------------#
#include necessary libraries#
#install.packages("hash") --> uncomment if you don't have this package#
library(hash)#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#read data#
data <- read.csv("tennis.csv")#
#get Grandslam data only#
GSwon <- na.omit(subset(data,tourney_level = "M",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "M",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#construct probability distribution of winning percentage per seed#
wProb <- data.frame(table(GSwon[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#regress probability of winning using different predictors#
#first serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
#second serve win percentage#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,sp/bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","ratio","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,5)])#
yhat3 <- linReg(dm[,c(1,2,3,5)])#
par(mfrow=c(1,4))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
plot(dseeds,yhat3,type='p',col="black",pch=19)#
----------------------------------------------------------- RIGHT NOW THE PREDICTIONS SUCK ------------------------------------------------------------------
#----------------------------------------------------------- PROGRAM TO PREDICT PROBABILITY OF WINNING ------------------------------------------------------------------#
#include necessary libraries#
#install.packages("hash") --> uncomment if you don't have this package#
library(hash)#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#read data#
data <- read.csv("tennis.csv")#
#get Grandslam data only#
GSwon <- na.omit(subset(data,tourney_level = "M",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "M",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#construct probability distribution of winning percentage per seed#
wProb <- data.frame(table(GSwon[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#regress probability of winning using different predictors#
#first serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
#second serve win percentage#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,sp/bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","ratio","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,5)])#
yhat3 <- linReg(dm[,c(1,2,3,5)])#
par(mfrow=c(1,4))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
plot(dseeds,yhat3,type='p',col="black",pch=19)#
#----------------------------------------------------------- RIGHT NOW THE PREDICTIONS SUCK ------------------------------------------------------------------
data[1,]
#----------------------------------------------------------- PROGRAM TO PREDICT PROBABILITY OF WINNING ------------------------------------------------------------------#
#include necessary libraries#
#install.packages("hash") --> uncomment if you don't have this package#
library(hash)#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#read data#
data <- read.csv("tennis.csv")#
#get Grandslam data only#
GSwon <- na.omit(subset(data,tourney_level = "A",select = c(surface,round,winner_seed,loser_seed,w_ace:w_bpSaved)))#
GSlost <- na.omit(subset(data,tourney_level = "A",select = c(surface,round,winner_seed,loser_seed,l_ace:l_bpSaved)))#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#construct probability distribution of winning percentage per seed#
wProb <- data.frame(table(GSwon[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#regress probability of winning using different predictors#
#first serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
#second serve win percentage#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,sp/bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","ratio","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,5)])#
yhat3 <- linReg(dm[,c(1,2,3,5)])#
par(mfrow=c(1,4))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
plot(dseeds,yhat3,type='p',col="black",pch=19)#
#----------------------------------------------------------- RIGHT NOW THE PREDICTIONS SUCK ------------------------------------------------------------------
data[1:10,]
#----------------------------------------------------------- PROGRAM TO PREDICT PROBABILITY OF WINNING ------------------------------------------------------------------#
#include necessary libraries#
#install.packages("hash") --> uncomment if you don't have this package#
library(hash)#
#program to perform data exploration on tennis data#
#clear workspace#
rm(list=ls())#
#simple linear regression function#
linReg <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	what <- solve(t(x)%*%x)%*%(t(x)%*%y)#
	return(x%*%what)#
}#
#read data#
data <- read.csv("tennis.csv")#
#get Grandslam data only#
GSwon <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
GSlost <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,l_ace:l_SvGms,w_bpSaved/w_bpFaced)))#
colnames(GSwon)[length(GSwon)] <- "w_bpSaved"#
#encode surfaces and round#
surfaces <- hash(as.numeric(unique(GSwon$surface)),unique(GSwon$surface))#
rounds <- hash(as.numeric(unique(GSwon$round)),unique(GSwon$round))#
#replace encodings#
GSwon[,1] <- as.numeric(GSwon[,1])#
GSwon[,2] <- as.numeric(GSwon[,2])#
GSlost[,1] <- as.numeric(GSlost[,1])#
GSlost[,2] <- as.numeric(GSlost[,2])#
#construct probability distribution of winning percentage per seed#
wProb <- data.frame(table(GSwon[,3]))#
wProb$Freq <- wProb$Freq*100/sum(wProb$Freq)#
colnames(wProb) <- c("Seeding","Prob")#
#create hash map of seeding and probabilities just in case#
wProbHash <- hash(wProb$Seeding,wProb$Prob)#
#define get hash function#
get_hash <- function(x) return(wProbHash[[toString(x)]])#
#regress probability of winning using different predictors#
#first serve win percentage#
fswp <- (GSwon$w_1stWon/GSwon$w_1stIn)*100#
#second serve win percentage#
sswp <- (GSwon$w_2ndWon/(GSwon$w_svpt - GSwon$w_1stIn - GSwon$w_df))*100#
seeds <- as.numeric(GSwon$winner_seed)#
#construct data matrix of seed, first serve win percentage and second serve win percentage#
dm <- na.omit(data.frame(GSwon$winner_seed,fswp,sswp,GSwon$w_bpSaved))#
#get unique seedings and number of them#
dseeds <- as.numeric(unique(GSwon$winner_seed))#
n <- length(dseeds)#
#function to return average first serve win percentage per seed#
averf <- function(x){#
	X <- dm[dm[,1] == x,2]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average 2nd serve win percentage per seed#
avers <- function(x){#
	X <- dm[dm[,1] == x,3]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#function to return average number of break points saved per seed#
averb <- function(x){#
	X <- dm[dm[,1] == x,4]#
	aver <- as.numeric(mean(X))#
	return (aver)#
}#
#get average first,second serve and break points win percentage per seed#
fp <- as.numeric(lapply(dseeds,averf))#
sp <- as.numeric(lapply(dseeds,avers))#
bp <- as.numeric(lapply(dseeds,averb))#
#get probability of winning per seed#
probs <- as.numeric(lapply(dseeds,get_hash))#
#create data matrix#
dm <- na.omit(data.frame(fp,sp,bp,sp/bp,probs))#
colnames(dm) <- c("fwp","swp","bpwp","ratio","wprob")#
#get regressed values for different combinations of predictors#
yhat <- linReg(dm)#
yhat2 <- linReg(dm[,c(1,2,5)])#
yhat3 <- linReg(dm[,c(1,2,3,5)])#
par(mfrow=c(1,4))#
plot(dseeds,dm$wprob,type='p',col="green",pch=19)#
plot(dseeds,yhat,type='p',col="red",pch=19)#
plot(dseeds,yhat2,type='p',col="black",pch=19)#
plot(dseeds,yhat3,type='p',col="black",pch=19)#
#----------------------------------------------------------- RIGHT NOW THE PREDICTIONS SUCK ------------------------------------------------------------------
table(GSwon[,1])
table(fp)
hist(fp)
x <- hist(fp)
x
help(sapply)
help(apply)
help(colVar)
help(colMeans)
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[,1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
#nB <- function(dm){#
	dm <- as.matrix(dm)#
	npred <- ncol(dm) - 1#
	x <- as.matrix(dm[,1:npred])#
	y <- as.matrix(dm[,npred+1])#
	means <- colMeans(x)#
	vars <- colVars(x)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
print(dm)#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[,1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
print(dm)#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[,1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- as.matrix(colMeans(X))#
	vars <- as.matrix(colVars(X))#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- as.matrix(dm[,1:n])#
	Y <- as.matrix(dm[,n+1])#
	means <- as.matrix(colMeans(X))#
	vars <- as.matrix(colVars(X))#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
dm <- read.csv("tennis.csv")#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- as.matrix(colMeans(X))#
	vars <- as.matrix(colVars(X))#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
library(hash) #include library hash#
data <- read.csv("tennis.csv")#
dm <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
surfaces <- hash(as.numeric(unique(dm$surface)),unique(dm$surface))#
rounds <- hash(as.numeric(unique(dm$round)),unique(dm$round))#
dm[,1] <- as.numeric(dm[,1])#
dm[,2] <- as.numeric(dm[,2])#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
install.packages("colSums")#
library(hash) #include library hash#
data <- read.csv("tennis.csv")#
dm <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
surfaces <- hash(as.numeric(unique(dm$surface)),unique(dm$surface))#
rounds <- hash(as.numeric(unique(dm$round)),unique(dm$round))#
dm[,1] <- as.numeric(dm[,1])#
dm[,2] <- as.numeric(dm[,2])#
nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
install.packages("colSums")#
library(hash) #include library hash#
data <- read.csv("tennis.csv")#
dm <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
surfaces <- hash(as.numeric(unique(dm$surface)),unique(dm$surface))#
rounds <- hash(as.numeric(unique(dm$round)),unique(dm$round))#
dm[,1] <- as.numeric(dm[,1])#
dm[,2] <- as.numeric(dm[,2])#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- colMeans(X)#
	vars <- colVars(X)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
install.packages("colSums")#
library(hash) #include library hash#
data <- read.csv("tennis.csv")#
dm <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
surfaces <- hash(as.numeric(unique(dm$surface)),unique(dm$surface))#
rounds <- hash(as.numeric(unique(dm$round)),unique(dm$round))#
dm[,1] <- as.numeric(dm[,1])#
dm[,2] <- as.numeric(dm[,2])#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- apply(X,1,mean)#
	vars <- apply(X,2,var)#
	print(means)#
	print(vars)#
#}
rm(list=ls()) #clear workspace#
#install.packages("hash") --> uncomment if package not installed#
install.packages("colSums")#
library(hash) #include library hash#
data <- read.csv("tennis.csv")#
dm <- na.omit(subset(data,tourney_level = "G",select = c(surface,round,winner_seed,loser_seed,w_ace:w_SvGms,w_bpSaved/w_bpFaced)))#
surfaces <- hash(as.numeric(unique(dm$surface)),unique(dm$surface))#
rounds <- hash(as.numeric(unique(dm$round)),unique(dm$round))#
dm[,1] <- as.numeric(dm[,1])#
dm[,2] <- as.numeric(dm[,2])#
#nB <- function(dm){#
	n <- length(dm) - 1#
	X <- dm[,1:n]#
	Y <- dm[,n+1]#
	means <- apply(X,2,mean)#
	vars <- apply(X,2,var)#
	print(means)#
	print(vars)#
#}
help(dnorm)
rnorm(1)
dnorm(0.4159115,0,1)
q()
d <- read.csv("tennis.csv")
stats <- d[,32:49]
stats <- na.omit(stats)
q9
q()
setwd("tennisData")
#clear workspace#
rm(list=ls())#
#
#read all data from 2007 to 2015#
d2007 <- na.omit(read.csv("atp_matches_2007.csv"))#
d2008 <- na.omit(read.csv("atp_matches_2008.csv"))#
d2009 <- na.omit(read.csv("atp_matches_2009.csv"))#
d2010 <- na.omit(read.csv("atp_matches_2010.csv"))#
d2011 <- na.omit(read.csv("atp_matches_2011.csv"))#
d2012 <- na.omit(read.csv("atp_matches_2012.csv"))#
d2013 <- na.omit(read.csv("atp_matches_2013.csv"))#
d2014 <- na.omit(read.csv("atp_matches_2014.csv"))#
d2015 <- na.omit(read.csv("atp_matches_2015.csv"))#
#
#Get interesting data with preferred filtering#
djok2007 <- d2007[d2007[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2007 <- djok2007[,c(2,5:26)]#
djok2008 <- d2008[d2008[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2008 <- djok2008[,c(2,5:26)]#
djok2009 <- d2009[d2009[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2009 <- djok2009[,c(2,5:26)]#
djok2010 <- d2010[d2010[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2010 <- djok2010[,c(2,5:26)]#
djok2011 <- d2011[d2011[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2011 <- djok2011[,c(2,5:26)]#
djok2012 <- d2012[d2012[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2012 <- djok2012[,c(2,5:26)]#
djok2013 <- d2013[d2013[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2013 <- djok2013[,c(2,5:26)]#
djok2014 <- d2014[d2014[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2014 <- djok2014[,c(2,5:26)]#
djok2015 <- d2015[d2015[,21]=="Novak Djokovic",c(19,29,4,5,3,30,11,32:49,21)]#
djok2015 <- djok2015[,c(2,5:26)]
djok <- rbind(djok2007,djok2008,djok2009,djok2010,djok2011,djok2012,djok2013,djok2014,djok2015)
djok
help(write.csv)
getpwd()
getwd()
setwd("Kaushik")
setwd("../")
write.csv(djok,"data.csv",row.names=TRUE,col.names=TRUE)
q()
x1 <- rnorm(0,0.002)
x1 <- rnorm(100,0,0.002)
x2 <- rnorm(100,0,0.003)
plot(x1,x2)
plot(x1,x2,col=c("green","red"))
plot(x1,x2,col=c("green","red"),pch=19)
x2 <- rnorm(10000,0,0.003)
x1 <- rnorm(10000,0,0.002)
plot(x1,x2,col=c("green","red"),pch=19)
data(iris)
pairs(iris[1:4])
names(pairs)
names(iris)
cor(iris[1:4])
attach(iris)
ls()
hist(Petal.Length)
x <- as.matrix(c(1,2))
y <- as.matrix(c(1,2))
x%*%y
t(x)%*%y
df <- data.frame(x,y)
df
dm <- as.matrix(df)
dm
t(dm)%*%dm
q()
setwd("~/Project/tennisData")
source("analysis.R")
library(sqldf)
source("analysis.R")
require(MASS)
head(djok)
m = polr(Result~.,data=djok,HESS=TRUE)
m = polr(as.factor(Result)~.,data=djok,HESS=TRUE)
m = glm(as.factor(Result)~.data=djok,family="binomial")
help(glm)
m <- glm(as.factor(Result)~.data=djok,family="binomial")
m <- glm(as.factor(Result)~.data=djok,family=binomial)
m <- glm(as.factor(Result)~.data = djok,family = binomial())
m <- glm(Result~.data = djok,family = binomial())
djok
Head(djok)
head(djok)
model <- glm(Result ~.,family=binomial(link='logit'),data=djok)
summary(model)
plot(model)
names(model)
model$coefficients
y <- as.matrix(djok[1:18])%*%as.matrix(model$coefficients[2:19])
y <- y - 0.59037852
sigma <- function(x) return(1/(1+exp(-x)))
p <- sigma(y)
p
as.numeric(p > 0.5)
djok[,19]
require(MASS)
model <- polr(Result ~.,data=djok,HESS=TRUE)
model <- polr(factor(Result) ~.,data=djok,HESS=TRUE)
x <- as.numeric(p > 0.5)
djok[,19] - x
abs(djok[,19] - x)
sum(abs(djok[,19] - x))
length(p)
60/313
313-60
253/313
q()
